# Let's modify the code to give it a cooler, cleaner, and more Pythonic structure
# with improvements and better output formatting.

modified_ascii_art_converter_code = '''
import cv2
import numpy as np
import sys

# ASCII symbols representing brightness levels from dark to light
SYMBOLS = ["@", "#", "*", "+", ":", "-", ".", " "]

# Map pixel intensity to symbol index
def get_symbol_index(pixel_value):
    return int(pixel_value / (256 / len(SYMBOLS)))

def convert_to_ascii(image, scale_x=0.1, scale_y=0.05):
    # Resize image based on scale to fit terminal
    height, width = image.shape
    new_width = int(width * scale_x)
    new_height = int(height * scale_y)
    resized_image = cv2.resize(image, (new_width, new_height))

    ascii_art = []
    for row in resized_image:
        ascii_row = [SYMBOLS[get_symbol_index(pixel)] for pixel in row]
        ascii_art.append("".join(ascii_row))
    return ascii_art

def display_ascii_art(ascii_art):
    print("\\n".join(ascii_art))

def load_image(image_path):
    return cv2.imread(image_path, cv2.IMREAD_GRAYSCALE)

if __name__ == "__main__":
    image_path = sys.argv[1] if len(sys.argv) > 1 else "sample_image.png"
    print(f"Using '{image_path}' for ASCII conversion...\\n")
    
    image = load_image(image_path)
    if image is None:
        print("Error: Could not read the image. Check the file path.")
        sys.exit(1)
        
    ascii_art = convert_to_ascii(image)
    display_ascii_art(ascii_art)
'''

# Save the modified Python code with enhancements
modified_ascii_output_path = "/mnt/data/PyNexus_ASCII_Artify_Modified.py"

with open(modified_ascii_output_path, "w") as file:
    file.write(modified_ascii_art_converter_code)

modified_ascii_output_path

'/mnt/data/PyNexus_ASCII_Artify_Modified.py'
